{
    "projects": [
        {
            "title": "Color correction",
            "preview": "assets/Projects/ColorCorrection/TextureEditor.jpg",
            "alternatePreviews": [
                "assets/Projects/ColorCorrection/preview.png",
                "assets/Projects/ColorCorrection/maps.png"
            ],
            "route": "ColorCorrection",
            "softwareUsed": [
                "WPF",
                "openCV"
            ],
            "purpose": "This tool was created to help process a tangible fabric and making a PBR material out of it. The VIZIO scanner outputs the files required for the pipeline, but does not do any processing. The main purpose of this tool was to take the output from the scanner and adjust the texture color, so that the fabric can be digitally colored without the need to scan a different color fabric.",
            "objective": "This was created to help our team create materials more smoothly. It eliminates the need for an artist to make sure the texture is correctly adjusted, which is both a monotonous task and one that is relatively easy to automate. It also allows exporting of the textures to unity, where they were stored in a database and could be used in the webstore.",
            "implementation": "This project was created using WPF, which I had never used before. However, I picked it up rather quickly. I tried a few different approaches to load and edit the textures, quickly learning that doing this type of operations on the GPU seemed like a good idea. To be able to do this I had to look for a library that could use a shader as opposed to the CPU to process images. I found EmguCV, which is a .NET wrapper for the C++ equivalent. The conversion process was automated using the algorithms Photoshop is using, and ran in the background while someone was scanning one of the fabrics."
        },
        {
            "title": "Deputy Donut",
            "preview": "assets/Projects/DeputyDonut/thumbnail.jpg",
            "alternatePreviews": [
                "assets/Projects/DeputyDonut/preview.jpg"
            ],
            "route": "DeputyDonut",
            "softwareUsed": [
                "Unity",
                "3DsMax",
                "Photoshop"
            ],
            "purpose": "Learning how to work together with others is an important skill to have. So working on projects with a group is a must. For this project we worked with a team of 5 people (1 artist and 4 programmers) to make a couch co-op game. This game was meant to be made during a single semester, and to be presented at the end. We struggled with finding the right balance with the concept. We knew what we wanted to make, but had some issues balancing the upgrades. Overal the team effort was balanced and there was a good dynamic.",
            "objective": "The game is about a police officer who wanted to go get a daily donut from a donut truck. However, he was unable to get a donut on this day and chases the truck around desperately to get his share. The game requires 2 players and they need to disable their opponent. There are various weapons scattered around the map and they can be used to attack the other player. From ramming into the other player to firing rockets and even a flamethrower, the weapons could be used by both players to gain the upper hand. Hopefully for the cop he can obtain his donuts today as well.",
            "implementation": "For this project I worked mostly as a technical artist. With a team of 4 programmers, we all needed to pull a little work away from him. As a technical artist I was responsible for a good amount of particles, along with creating models, making rigs and animations. I also had a hand in the code of the project, but did not focus on this because it was not necessary with the team we had. Apart from that, while the UI was not completely finished, most of the code taking care of the on-screen elements was implemented together with our artist to achieve a nice feel to it."
        },
        {
            "title": "Unity Metadata hider",
            "preview": "assets/Projects/MetaHider/thumbnail.jpg",
            "route": "unity-metadata-hider",
            "softwareUsed": [
                "Unity",
                "Console"
            ],
            "purpose": "Unity creates a metadata file for every file and directory in the project, this can quickly get cluttered and make it hard to find the correct object in the windows explorer. Therefore I wrote a tool that takes these meta files and hides / unhides them.",
            "objective": "Make a small console application that takes care of hiding the meta files generated by unity to create some order in the folde explorer. This should also be aware of changes in the filesystem and apply this script where necessary, as well as log its operations and be able to undo in case something would go wrong.",
            "implementation": "The way it works is by changing one of the attributes responsible for making the component visible. Windows than knows that file is meant to be hidden and does not show it in the file browser. It's just a small tool, but it doesn't always need to be complex to make for an interesting project."
        },
        {
            "title": "Plex download manager",
            "preview": "assets/Projects/PlexManager/thumbnail.jpg",
            "route": "plextool",
            "softwareUsed": [
                "WPF"
            ],
            "purpose": "Managing data on a server can be tricky. There are a large variety of tools available that can do a lot of things. but for Plex specifically we did not have what we were looking for. This utility checks for downloaded files that are going to be added to the server. This eliminated the manual interaction required to move downloaded files to their respective directories.",
            "objective": "I created this to eliminate the need to move files manually. When a file is downloaded, it is checked to see if it is a film, serie... From there it is given a location on the server and Plex is notified via its API that a file has changed and the database needs to be updated.",
            "implementation": "Implemented with a minor interface in WPF, most of the process happens automatically and is mainly used for logging. Using several API's to check what a file is and where it is supposed to go, I can figure  out what goes where and make sure everything is in the right place. "
        }
    ]
}